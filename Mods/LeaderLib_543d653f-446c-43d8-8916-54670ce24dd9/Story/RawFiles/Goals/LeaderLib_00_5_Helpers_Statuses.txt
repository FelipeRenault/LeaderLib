Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

//REGION STATUS_CHECK
QRY
LeaderLib_Helper_QRY_HasStatus((GUIDSTRING)_Object, (STRING)_Status)
AND
HasAppliedStatus(_Object, _Status, 1)
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_HasStatus((GUIDSTRING)_Object, (STRING)_Status)
AND
HasActiveStatus(_Object, _Status, 1)
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_HasAnyStatus((GUIDSTRING)_Object, (STRING)_Status1, (STRING)_Status2)
AND
LeaderLib_Helper_QRY_HasStatus(_Object, _Status1)
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_HasAnyStatus((GUIDSTRING)_Object, (STRING)_Status1, (STRING)_Status2)
AND
LeaderLib_Helper_QRY_HasStatus(_Object, _Status2)
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_IsStunningStatus((STRING)_Status)
AND
GetStatusType(_Status, _Type)
AND
LeaderLib_Helper_QRY_Internal_IsStunningStatus(_Type)
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_Internal_IsStunningStatus("INCAPACITATED")
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_Internal_IsStunningStatus("KNOCKED_DOWN")
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_IsDamageStatus((STRING)_Status)
AND
GetStatusType(_Status, _Type)
AND
LeaderLib_Helper_QRY_Internal_IsDamageStatus(_Type)
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_Internal_IsDamageStatus("DAMAGE")
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_Internal_IsDamageStatus("DAMAGE_ON_MOVE")
THEN
DB_NOOP(1);

QRY
LeaderLib_Helper_QRY_HasPermanentStatus((GUIDSTRING)_Object, (STRING)_Status)
AND
LeaderLib_Helper_QRY_HasStatus(_Object, _Status)
AND
GetStatusTurns(_Object, _Status, _Turns)
AND
_Turns == -1
THEN
DB_NOOP(1);
//END_REGION

//Checks if the object is null before actually calling RemoveStatus
PROC
LeaderLib_Statuses_SafeRemoval((GUIDSTRING)_Object, (STRING)_Status)
AND
_Object != NULL_00000000-0000-0000-0000-000000000000
AND
ObjectExists(_Object, 1)
THEN
RemoveStatus(_Object, _Status);

PROC
LeaderLib_Statuses_RemoveIfActive((GUIDSTRING)_Object, (STRING)_Status)
AND
ObjectExists(_Object, 1)
AND
HasActiveStatus(_Object, _Status, 1)
THEN
RemoveStatus(_Object, _Status);

//REGION EXTEND_STATUS
//For applying a status and adding on top of the current turns, if any exists

PROC
LeaderLib_Statuses_ExtendStatus((GUIDSTRING)_Object, (STRING)_Status, (INTEGER)_AddTurns)
THEN
LeaderLib_Statuses_ExtendStatus(_Object, _Status, _AddTurns, 99, 1, _Object);

PROC
LeaderLib_Statuses_ExtendStatus((GUIDSTRING)_Object, (STRING)_Status, (INTEGER)_AddTurns, (INTEGER)_MaxTurns)
THEN
LeaderLib_Statuses_ExtendStatus(_Object, _Status, _AddTurns, _MaxTurns, 1, _Object);

PROC
LeaderLib_Statuses_ExtendStatus((GUIDSTRING)_Object, (STRING)_Status, (INTEGER)_AddTurns, (INTEGER)_MaxTurns, (INTEGER)_Force, (GUIDSTRING)_Source)
AND
HasActiveStatus(_Object, _Status, 1)
AND
GetStatusTurns(_Object, _Status, _Turns)
AND
IntegerSum(_Turns, _AddTurns, _NextTurns)
AND
IntegerMin(_NextTurns, _MaxTurns, _CappedTurns)
AND
Real(_CappedTurns, _DurationR)
AND
RealProduct(_DurationR, 6.0, _Duration)
THEN
ApplyStatus(_Object, _Status, _Duration, _Force, _Source);

PROC
LeaderLib_Statuses_ExtendStatus((GUIDSTRING)_Object, (STRING)_Status, (INTEGER)_AddTurns, (INTEGER)_MaxTurns, (INTEGER)_Force, (GUIDSTRING)_Source)
AND
HasActiveStatus(_Object, _Status, 0)
AND
Real(_AddTurns, _DurationR)
AND
RealProduct(_DurationR, 6.0, _Duration)
THEN
ApplyStatus(_Object, _Status, _Duration, _Force, _Source);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"