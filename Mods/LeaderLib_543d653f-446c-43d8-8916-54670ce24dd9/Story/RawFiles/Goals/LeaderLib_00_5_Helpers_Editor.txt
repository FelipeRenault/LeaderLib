Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION
//REGION ANIM_TEXT_EVENTS
//Workaround for the GetTextEvent bug
//http://larian.com/forums/ubbthreads.php?ubb=showflat&Number=643095
//Fixed in an unknown patch
/*
IF
TextEventSet(_Event)
AND
GetTextEventParamString(1, "leaderlib_anim") // What was formerly the text event name
AND
GetTextEventParamUUID(1, _Target)
AND
GetTextEventParamString(2, _Anim)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_anim] fired. Playing animation [",_Anim,"].");
PlayAnimation(_Target, _Anim);
*/

IF
TextEventSet("leaderlib_anim")
AND
GetTextEventParamUUID(1, _Target)
AND
GetTextEventParamString(2, _Anim)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_anim] fired. Playing animation [",_Anim,"].");
PlayAnimation(_Target, _Anim);

IF
TextEventSet("leaderlib_animloop")
AND
GetTextEventParamUUID(1, (CHARACTERGUID)_Target)
AND
GetTextEventParamString(2, _Anim)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_animloop] fired. Setting animation override to [",_Anim,"].");
CharacterSetAnimationOverride(_Target, _Anim);

IF
TextEventSet("leaderlib_animstop")
AND
GetTextEventParamUUID(1, (CHARACTERGUID)_Target)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_animstop] fired. Clearing animation override.");
CharacterSetAnimationOverride(_Target, "");

IF
TextEventSet("leaderlib_anim")
AND
GetTextEventParamString(1, _Anim)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_anim] fired. Playing animation [",_Anim,"] on controlled character.");
PlayAnimation(_Player, _Anim);

IF
TextEventSet("leaderlib_animloop")
AND
GetTextEventParamString(1, _Anim)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_animloop] fired. Setting animation override to [",_Anim,"] on controlled character.");
CharacterSetAnimationOverride(_Player, _Anim);

IF
TextEventSet("leaderlib_animstop")
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_animstop] fired. Clearing animation override on controlled character.");
CharacterSetAnimationOverride(_Player, "");
//END_REGION

//REGION FX_TEXT_EVENTS
IF
TextEventSet("leaderlib_fxloop")
AND
GetTextEventParamString(1, _EffectName)
AND
GetTextEventParamString(2, _BoneName)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
AND
DB_CurrentLevel(_Region)
AND
StringConcatenate("LeaderLib.Debug.TextEvent.LoopEffect.", _EffectName, _ID)
THEN
PROC_LoopEffect(_EffectName, _Player, _ID, _Region, _BoneName);
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_effectloop] fired. Playing looped effect [",_EffectName,"]:[",_BoneName,"] on controlled character.");

IF
TextEventSet("leaderlib_fxstop")
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
AND
DB_LoopEffect(_Player, _fxHandle, _ID, _Region, _effect, _BoneName)
THEN
PROC_StopLoopEffect(_Player, _ID);
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_fxstop] fired. Stopped all looped effects on controlled character.");

IF
TextEventSet("leaderlib_playfx")
AND
GetTextEventParamString(1, _EffectName)
AND
GetTextEventParamString(2, _Bone)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
PlayEffect(_Player, _EffectName, _Bone);

IF
TextEventSet("leaderlib_playfxpos")
AND
GetTextEventParamString(1, _EffectName)
AND
GetTextEventParamReal(2, _x)
AND
GetTextEventParamReal(3, _y)
AND
GetTextEventParamReal(4, _z)
THEN
PlayEffectAtPosition(_EffectName, _x, _y, _z);
//END_REGION

//REGION SOUND
IF
TextEventSet("leaderlib_playsfx")
AND
GetTextEventParamUUID(1, _Sound)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
PlaySoundResource(_Player, _Sound);

IF
TextEventSet("leaderlib_playhudsfx")
AND
GetTextEventParamUUID(1, _Sound)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterPlayHUDSoundResource(_Player, _Sound);
//END_REGION

//REGION STATS_TEXT_EVENTS
IF
TextEventSet("leaderlib_addpoints")
AND
GetTextEventParamString(1, "attribute")
AND
GetTextEventParamInteger(2, _Amount)
AND
IntegertoString(_Amount, _AmountStr)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_addpoints] fired. Adding [",_AmountStr,"] attribute points to controller characters.");
CharacterAddAttributePoint(_Player, _Amount);

IF
TextEventSet("leaderlib_addpoints")
AND
GetTextEventParamString(1, "ability")
AND
GetTextEventParamInteger(2, _Amount)
AND
IntegertoString(_Amount, _AmountStr)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_addpoints] fired. Adding [",_AmountStr,"] ability points to controller characters.");
CharacterAddAbilityPoint(_Player, _Amount);

IF
TextEventSet("leaderlib_addpoints")
AND
GetTextEventParamString(1, "civil")
AND
GetTextEventParamInteger(2, _Amount)
AND
IntegertoString(_Amount, _AmountStr)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_addpoints] fired. Adding [",_AmountStr,"] civil points to controller characters.");
CharacterAddCivilAbilityPoint(_Player, _Amount);

IF
TextEventSet("leaderlib_addpoints")
AND
GetTextEventParamString(1, "talent")
AND
GetTextEventParamInteger(2, _Amount)
AND
IntegertoString(_Amount, _AmountStr)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_addpoints] fired. Adding [",_AmountStr,"] talent points to controller characters.");
CharacterAddTalentPoint(_Player, _Amount);

IF
TextEventSet("leaderlib_addpoints")
AND
GetTextEventParamString(1, "source")
AND
GetTextEventParamInteger(2, _Amount)
AND
IntegertoString(_Amount, _AmountStr)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_addpoints] fired. Adding [",_AmountStr,"] source points to controller characters.");
CharacterAddSourcePoints(_Player, _Amount);

IF
TextEventSet("leaderlib_addpoints")
AND
GetTextEventParamString(1, "sourcemax")
AND
GetTextEventParamInteger(2, _Amount)
AND
IntegertoString(_Amount, _AmountStr)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
AND
CharacterGetMaxSourcePoints(_Player, _BaseMax)
AND
IntegerSum(_BaseMax, _Amount, _MaxAmount)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_addpoints] fired. Adding [",_AmountStr,"] max source points to controller characters.");
CharacterOverrideMaxSourcePoints(_Player, _MaxAmount);
//END_REGION

//REGION DEBUG_FLAGS
IF
ObjectFlagSet("LeaderLib_Debug_IsCompanion", (CHARACTERGUID)_Companion, _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Recruiter)
AND
CharacterGetDisplayName(_Companion, _, _Name)
THEN
CharacterMakePlayer(_Companion, _Recruiter);
//CharacterMakePlayer(_Companion);
DB_IsPlayer(_Companion);
//CharacterStopFollow(_Companion);
//CharacterDetachFromGroup(_Companion);
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:LeaderLib_Debug_IsCompanion(Set)] Added character [",_Name,"] to the party.");

IF
ObjectFlagCleared("LeaderLib_Debug_IsCompanion", (CHARACTERGUID)_Companion, _Instance)
AND
CharacterGetDisplayName(_Companion, _, _Name)
THEN
//CharacterDetachFromGroup(_Companion);
CharacterMakeNPC(_Companion);
NOT DB_IsPlayer(_Companion);
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:LeaderLib_Debug_IsCompanion(Cleared)] Removed character [",_Name,"] from the party.");

PROC
PROC_GLOBAL_DialogStartRequested(_Companion, _Player)
AND
ObjectGetFlag(_Companion, "LeaderLib_Debug_IsCompanion", 1)
THEN
Proc_StartDialog(0, "LeaderLib_Debug_RecruitCharacter", _Companion, _Player);
//END_REGION

//REGION TREASURE_TESTING
IF
TextEventSet("leaderlib_tradegen")
AND
DB_TraderGeneratedTreasureForLevel(_Trader, _OldLevel)
THEN
DB_LeaderLib_Editor_Temp_GenerateTradeItems(_Trader);
ProcClearTradeFacts(_Trader);

IF
TextEventSet("leaderlib_tradegen")
AND
CharacterGetHostCharacter(_Player)
AND
DB_LeaderLib_Editor_Temp_GenerateTradeItems(_Trader)
THEN
GenTradeItems(_Player, _Trader);
NOT DB_LeaderLib_Editor_Temp_GenerateTradeItems(_Trader);

IF
TextEventSet("leaderlib_generatetreasure")
AND
GetTextEventParamString(1, _Treasure)
AND
CharacterGetHostCharacter(_Player)
AND
GetPosition(_Player, _x, _y, _z)
AND
CreateItemTemplateAtPosition("LOOT_LeaderLib_BackPack_Invisible_98fa7688-0810-4113-ba94-9a8c8463f830", _x, _y, _z, _Backpack)
AND
CharacterGetLevel(_Player, _Level)
THEN
GenerateTreasure(_Backpack, _Treasure, _Level, _Player);
MoveAllItemsTo(_Backpack, _Player, 1, 1, 1);
ProcObjectTimer(_Backpack, "LeaderLib_Timers_TextEvent_RemoveGenTreasureBackpack", 250);

PROC
ProcObjectTimerFinished((ITEMGUID)_Backpack, "LeaderLib_Timers_TextEvent_RemoveGenTreasureBackpack")
THEN
ItemRemove(_Backpack);
//END_REGION

//REGION PRESETS
IF
TextEventSet("leaderlib_applypreset")
AND
GetTextEventParamString(1, _Preset)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterApplyPreset(_Player, _Preset);

IF
TextEventSet("leaderlib_applyrace")
AND
GetTextEventParamString(1, _Preset)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterApplyRacePreset(_Player, _Preset);

IF
TextEventSet("leaderlib_applyhenchman")
AND
GetTextEventParamString(1, _Preset)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterApplyHenchmanPreset(_Player, _Preset);

IF
TextEventSet("leaderlib_applypartypreset")
AND
GetTextEventParamString(1, _Preset)
AND
CharacterGetHostCharacter(_Player)
THEN
LoadPartyPreset(_Preset, _Player);

IF
TextEventSet("leaderlib_applyequipment")
AND
GetTextEventParamString(1, _Equipment)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterTransformAppearanceToWithEquipmentSet(_Player, _Player, _Equipment, 0);
//END_REGION

//REGION MESSAGE_BOXES
IF
TextEventSet("leaderlib_notification")
AND
GetTextEventParamString(1, _Message)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
ShowNotification(_Player, _Message);
//END_REGION

//REGION STATUSES
IF
TextEventSet("leaderlib_statusapply")
AND
GetTextEventParamUUID(1, _Target)
AND
GetTextEventParamString(2, _Status)
AND
GetTextEventParamInteger(3, _Turns)
AND
_Turns > 0
AND
IntegerProduct(_Turns, 6, _DurationInt)
AND
Real(_DurationInt, _Duration)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_applystatus] fired. Applying status [",_Status,"].");
ApplyStatus(_Target, _Status, _Duration, 0, _Target);

IF
TextEventSet("leaderlib_statusapply")
AND
GetTextEventParamUUID(1, _Target)
AND
GetTextEventParamString(2, _Status)
AND
GetTextEventParamInteger(3, _Turns)
AND
_Turns <= 0
AND
Real(_Turns, _Duration)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_applystatus] fired. Applying status [",_Status,"].");
ApplyStatus(_Target, _Status, _Duration, 0, _Target);

IF
TextEventSet("leaderlib_statusremove")
AND
GetTextEventParamUUID(1, _Target)
AND
GetTextEventParamString(2, _Status)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Helpers:Editor:TextEventSet] Event [leaderlib_removestatus] fired. Removing status [",_Status,"].");
RemoveStatus(_Target, _Status);
//END_REGION

IF
TextEventSet("leaderlib_jumptoturn")
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
JumpToTurn(_Player);

IF
TextEventSet("leaderlib_setname")
AND
GetTextEventParamString(1, _Name)
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterSetCustomName(_Player, _Name);

IF
TextEventSet("leaderlib_screenshotsetup")
AND
DB_IsPlayer(_Player)
AND
CharacterIsControlled(_Player, 1)
THEN
CharacterSetCustomName(_Player, "Leader");
CharacterApplyRacePreset(_Player, "Elf");
CharacterApplyPreset(_Player, "Fighter_Act2");
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
