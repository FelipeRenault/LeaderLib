Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _Duration, _Force)
KBSECTION
//REGION TOGGLE_SKILL
PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status)
THEN
LeaderLib_Skills_Register_StatusToggleSkill(_Skill, _Status, -1.0, 1, 0);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration)
THEN
LeaderLib_Skills_Register_StatusToggleSkill(_Skill, _Status, _Duration, 1, 0);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
THEN
LeaderLib_Skills_Register_StatusToggleSkill(_Skill, _Status, _Duration, _Force, 0);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force, (INTEGER)_OnUse)
AND
DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _OtherDuration, _OtherForce, _OtherOnUse)
THEN
NOT DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _OtherDuration, _OtherForce, _OtherOnUse);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force, (INTEGER)_OnUse)
THEN
DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _Duration, _Force, _OnUse);

IF
CharacterUsedSkill(_Character, _Skill, _, _)
AND
DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _Duration, _Force, 1)
THEN
LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status);
LeaderLib_Skills_Internal_ProcessStatusToggle(_Character, _Skill, _Status, _Duration, _Force);

IF
SkillCast(_Character, _Skill, _, _)
AND
DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _Duration, _Force, 0)
THEN
LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status);
LeaderLib_Skills_Internal_ProcessStatusToggle(_Character, _Skill, _Status, _Duration, _Force);

PROC
LeaderLib_Skills_BlockStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status)
THEN
DB_NOOP(1);

PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
NOT DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status)
AND
NOT DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill)
AND
HasActiveStatus(_Character, _Status, 0)
THEN
ApplyStatus(_Character, _Status, _Duration, 1);
DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill);

PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
NOT DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status)
AND
NOT DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);
DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill);

//Clear
PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill);

PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status)
THEN
NOT DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status);
//END_REGION

//REGION SKILL_DUMMIES
PROC
LeaderLib_Skills_UseSkillOnTarget((CHARACTERGUID)_Caster, (GUIDSTRING)_Target, (STRING)_Skill, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
GetUUID(_Caster, _UUID)
AND
GetUUID(_Target, _UUID2)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
LeaderLog_QRY_Log("COMBINE", _Skill, "_", _UUID, "_", _UUID2, "_", _RanStr)
AND
DB_LeaderLog_Temp_CombinedString(_ID)
AND
LeaderLib_Skills_QRY_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
AND
GetPosition(_Caster, _x, _y, _z)
THEN
NOT DB_LeaderLog_Temp_CombinedString(_ID);
//LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTarget] Got dummy with ID [",_ID,"]. Casting [",_Skill,"] after teleport.");
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_SkillDummyTeleported", 0, 0);

PROC
LeaderLib_Skills_UseSkillOnTargetFromPosition((CHARACTERGUID)_Caster, (GUIDSTRING)_Target, (STRING)_Skill, (REAL)_x, (REAL)_y, (REAL)_z, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
GetUUID(_Caster, _UUID)
AND
GetUUID(_Target, _UUID2)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
LeaderLog_QRY_Log("COMBINE", _Skill, "_", _UUID, "_", _UUID2, "_", _RanStr)
AND
DB_LeaderLog_Temp_CombinedString(_ID)
AND
LeaderLib_Skills_QRY_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLog_Temp_CombinedString(_ID);
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTargetFromPosition] Teleporting skill dummy for skill [",_Skill,"] to position. Dummy ID: [",_ID,"]");
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_SkillDummyTeleported", 0, 0);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyTeleported")
AND
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyTeleported] Skill dummy teleported to position. Moving to position as a failsafe.");
CharacterMoveToPosition(_Dummy, _x, _y, _z, 1, "LeaderLib_Events_SkillDummyArrived");

//Failsafe
IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyTeleported")
THEN
LeaderLib_StartObjectTimer(_Dummy, 1000, "LeaderLib_Timers_Skills_StartSkillDummyCasting", "LeaderLib_Events_SkillDummyArrived");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyTeleported] Skill dummy for skill [",_Skill,"] teleported to position. Moving to position as a failsafe.");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill)
AND
ObjectIsCharacter(_Target, 1)
THEN
MakeWar(_Dummy, (CHARACTERGUID)_Target, 0);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyArrived] Skill dummy is using skill [",_Skill,"] on target.");
LeaderLib_CancelObjectTimer(_Dummy, "LeaderLib_Timers_Skills_StartSkillDummyCasting");
//CharacterSetDetached(_Dummy, 0);
//SetVisible(_Dummy, 1);
CharacterUseSkill(_Dummy, _Skill, _Target, 1, 1, 1);
LeaderLib_Skills_MarkDummyForReset(_Dummy, 3000);

/*
IF
SkillCast(_Dummy, _Skill, _, _)
AND
ObjectGetFlag(_Dummy, "LeaderLib_IsSkillDummy", 1)
AND
CharacterGetLevel(_Dummy, _Level)
AND
IntegertoString(_Level, _LevelStr)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTarget] Dummy is level [",_LevelStr,"].");
*/

IF
SkillCast(_Dummy, _Skill, _, _)
AND
ObjectGetFlag(_Dummy, "LeaderLib_IsSkillDummy", 1)
THEN
LeaderLib_Skills_MarkDummyForReset(_Dummy, 2500);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillCast(Dummy)] Skill dummy cast skill [",_Skill,"]. Resetting dummy after 2500ms.");
//END_REGION

//REGION DUMMY_PREPARATION
QRY
LeaderLib_Skills_QRY_PrepareSkillDummy((STRING)_ID, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
THEN
LeaderLib_Skills_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment);

PROC
LeaderLib_Skills_PrepareSkillDummy((STRING)_ID, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
DB_LeaderLib_Skills_InactiveSkillDummies((CHARACTERGUID)_Dummy)
AND
ObjectExists(_Dummy, 1)
AND
GetPosition(_Caster, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);
LeaderLib_Skills_Internal_PrepareDummyStats(_Dummy, _Caster, _CopyStats, _CopyEquipment);
CharacterSetDetached(_Dummy, 1);
SetOnStage(_Dummy, 1);
SetVarString(_Dummy, "LeaderLib_SkillDummyID", _ID);
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

PROC
LeaderLib_Skills_PrepareSkillDummy((STRING)_ID, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
NOT DB_LeaderLib_Skills_SkillDummies(_ID,_)
AND
GetPosition(_Caster, _x, _y, _z)
AND
TemporaryCharacterCreateAtPosition(_x, _y, _z, "LeaderLib_SkillDummy_94668062-11ea-4ecf-807c-4cc225cbb236", 0, _Dummy)
THEN
LeaderLib_Skills_Internal_PrepareDummyStats(_Dummy, _Caster, _CopyStats, _CopyEquipment);
ObjectSetFlag(_Dummy, "LeaderLib_IsSkillDummy");
CharacterMakeStoryNpc(_Dummy, 1);
SetVisible(_Dummy, 0);
CharacterSetDetached(_Dummy, 1);
SetVarString(_Dummy, "LeaderLib_SkillDummyID", _ID);
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

PROC
LeaderLib_Skills_Internal_PrepareDummyStats((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
THEN
//CharacterTransformAppearanceTo(_Dummy, _Caster, _CopyEquipment, 1);
CharacterTransformFromCharacter(_Dummy, _Caster, 0, 1, _CopyStats, _CopyEquipment, _CopyStats, 1, 0);
//LeaderLib_StartCharacterCharacterTimer(_Dummy, _Caster, 50, "LeaderLib_Timers_SkillDummy_CopyStats", "LeaderLib_Commands_SkillDummy_CopyStats")

PROC
LeaderLib_Skills_Internal_PrepareDummyStats((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, 1, (INTEGER)_CopyEquipment)
THEN
LeaderLib_Helper_CopyStats(_Dummy, _Caster, 1, 1, 1, 1);

PROC
LeaderLib_Skills_Internal_PrepareDummyStats((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
CharacterIsPlayer(_Caster, 1)
THEN
CharacterSetRelationIndivFactionToFaction(_Dummy, "Evil NPC", 0);
CharacterSetRelationIndivFactionToIndivFaction(_Dummy, _Caster, 100);
CharacterAddAttitudeTowardsPlayer(_Dummy, _Caster, 100);

PROC
LeaderLib_Skills_Internal_PrepareDummyStats((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
CharacterIsPlayer(_Caster, 0)
AND
GetFaction(_Caster, _Faction)
THEN
//CharacterSetRelationIndivFactionToIndivFaction(_Dummy, _Caster, 100);
SetFaction(_Dummy, _Faction);

PROC
LeaderLib_Skills_MarkDummyForReset((CHARACTERGUID)_Dummy, (INTEGER)_Duration)
THEN
ProcObjectTimerCancel(_Dummy, "LeaderLib_Timers_ResetSkillDummy");
ProcObjectTimer(_Dummy, "LeaderLib_Timers_ResetSkillDummy", _Duration);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Dummy, "LeaderLib_Timers_ResetSkillDummy")
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
LeaderLib_Skills_ResetDummy(_Dummy);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);
DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);
SetVarString(_Dummy, "LeaderLib_SkillDummyID", "");
SetOnStage(_Dummy, 0);

IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
AND
ObjectExists(_Dummy, 1)
THEN
CharacterMakeStoryNpc(_Dummy, 0);
RemoveTemporaryCharacter(_Dummy);
NOT DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy)
AND
ObjectExists(_Dummy, 1)
THEN
CharacterMakeStoryNpc(_Dummy, 0);
RemoveTemporaryCharacter(_Dummy);
NOT DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);
/*
SetOnStage(_Dummy, 0);
CharacterDieImmediate(_Dummy, 0, "", _Dummy);
*/

IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy)
THEN
NOT DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
