Version 1
SubGoalCombiner SGC_AND
INITSECTION
LeaderLib_Settings_InitSettings();

//DB_LeaderLib_EquipmentSlots(_Slot)
//DB_LeaderLib_Settings_ItemTemplates(_Name, _ItemTemplate)
//DB_LeaderLib_Settings_DialogVariables(_VariableName, _VariableValue)
//DB_LeaderLib_Settings_QueueRates(_ReferenceName, _TickRate, _TimeoutRate)
//DB_LeaderLib_Settings_Temp_RegisteredModsList(_Str)
//DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, _Str)
KBSECTION
//REGION SETTINGS
PROC
LeaderLib_Settings_InitSettings()
AND
DB_LeaderLib_Settings_Initialized(1)
THEN
NOT DB_LeaderLib_Settings_Initialized(1);

PROC
LeaderLib_Settings_InitSettings()
THEN
LeaderLib_Settings_InitEquipmentSlots();
LeaderLib_Settings_InitStats();
LeaderLib_Settings_InitSurfaces();
LeaderLib_Settings_InitRaceData();
LeaderLib_Settings_InitStatusData();

SysClear("DB_LeaderLib_Settings_QueueRates", 3);
DB_LeaderLib_Settings_QueueRates("TraderSpawn", 500, 2000);
DB_LeaderLib_Settings_QueueRates("TraderCheck", 100, 500);
DB_LeaderLib_Settings_QueueRates("Treasure", 100, 60000);
DB_LeaderLib_Settings_QueueRates("ItemGeneration", 0, 5000);

SysClear("DB_LeaderLib_Settings_ItemTemplates", 2);
DB_LeaderLib_Settings_ItemTemplates("Book_ModMenu", "BOOK_LeaderLib_ModMenu_646a1194-3383-47fa-a379-ebefa3d2b108");

SysClear("DB_LeaderLib_Settings_DialogVariables", 2);
DB_LeaderLib_Settings_DialogVariables("PlayerName", "LeaderLib_PlayerName_6c5b9559-53e3-47f7-8881-309a930e4be3");
DB_LeaderLib_Settings_DialogVariables("SpeakerName", "LeaderLib_SpeakerName_9fc648d4-7984-44e7-afa4-b8a07f21185b");
DB_LeaderLib_Settings_DialogVariables("ModMenu_PageInfo", "LeaderLib_ModMenu_PageInfo_2b744313-9239-412c-80a8-f3b5e8b56156");
DB_LeaderLib_Settings_DialogVariables("ModList", "LeaderLib_Settings_ModList_50c55fbe-ad1e-490e-92d1-8836ca42ca12");
DB_LeaderLib_Settings_DialogVariables("CurrentAutosaveInterval", "LeaderLib_AutosaveMenu_CurrentSettings_b48918b6-4864-4aae-88fd-53d658ccb082");

//Bartering Tweaks
DB_LLBARTER_DialogBlacklist("LeaderLib", "LeaderLib_ModMenu");
DB_LLBARTER_DialogBlacklist("LeaderLib", "LeaderLib_SettingsMenu");
DB_LLBARTER_DialogBlacklist("LeaderLib", "LeaderLib_AutosaveMenu");

//Dummies
//Crime stuff is ignored when something attacks a dummy
DB_NeutralTagIgnore("LeaderLib_Dummy");

LeaderLib_Settings_SettingsInitialized();

PROC
LeaderLib_Settings_SettingsInitialized()
THEN
DB_LeaderLib_Settings_Initialized(1);

PROC
LeaderLib_Settings_InitEquipmentSlots()
AND
NOT DB_LeaderLib_EquipmentSlots(_)
THEN
DB_LeaderLib_EquipmentSlots("Weapon");
DB_LeaderLib_EquipmentSlots("Shield");
DB_LeaderLib_EquipmentSlots("Helmet");
DB_LeaderLib_EquipmentSlots("Breast");
DB_LeaderLib_EquipmentSlots("Leggings");
DB_LeaderLib_EquipmentSlots("Ring");
DB_LeaderLib_EquipmentSlots("Belt");
DB_LeaderLib_EquipmentSlots("Boots");
DB_LeaderLib_EquipmentSlots("Gloves");
DB_LeaderLib_EquipmentSlots("Amulet");
DB_LeaderLib_EquipmentSlots("Ring2");

PROC
LeaderLib_Settings_InitEquipmentSlots()
AND
LeaderLib_Array_QRY_EmptyLength("LeaderLib_EquipmentSlots")
AND
DB_LeaderLib_EquipmentSlots(_Slot)
THEN
LeaderLib_Array_AddToArray("LeaderLib_EquipmentSlots", _Slot);

PROC
LeaderLib_Settings_InitStats()
AND
NOT DB_LeaderLib_Attributes(_)
THEN
DB_LeaderLib_Attributes("Strength");
DB_LeaderLib_Attributes("Finesse");
DB_LeaderLib_Attributes("Intelligence");
DB_LeaderLib_Attributes("Constitution");
DB_LeaderLib_Attributes("Memory");
DB_LeaderLib_Attributes("Wits");

PROC
LeaderLib_Settings_InitStats()
AND
NOT DB_LeaderLib_Abilities(_)
THEN
DB_LeaderLib_Abilities("WarriorLore");
DB_LeaderLib_Abilities("RangerLore");
DB_LeaderLib_Abilities("RogueLore");
DB_LeaderLib_Abilities("SingleHanded");
DB_LeaderLib_Abilities("TwoHanded");
DB_LeaderLib_Abilities("Reflection");
DB_LeaderLib_Abilities("Ranged");
DB_LeaderLib_Abilities("Shield");
DB_LeaderLib_Abilities("Reflexes");
DB_LeaderLib_Abilities("PhysicalArmorMastery");
DB_LeaderLib_Abilities("Sourcery");
DB_LeaderLib_Abilities("Telekinesis");
DB_LeaderLib_Abilities("FireSpecialist");
DB_LeaderLib_Abilities("WaterSpecialist");
DB_LeaderLib_Abilities("AirSpecialist");
DB_LeaderLib_Abilities("EarthSpecialist");
DB_LeaderLib_Abilities("Necromancy");
DB_LeaderLib_Abilities("Summoning");
DB_LeaderLib_Abilities("Polymorph");
DB_LeaderLib_Abilities("Repair");
DB_LeaderLib_Abilities("Sneaking");
DB_LeaderLib_Abilities("Pickpocket");
DB_LeaderLib_Abilities("Thievery");
DB_LeaderLib_Abilities("Loremaster");
DB_LeaderLib_Abilities("Crafting");
DB_LeaderLib_Abilities("Barter");
DB_LeaderLib_Abilities("Charm");
DB_LeaderLib_Abilities("Intimidate");
DB_LeaderLib_Abilities("Reason");
DB_LeaderLib_Abilities("Persuasion");
DB_LeaderLib_Abilities("Leadership");
DB_LeaderLib_Abilities("Luck");
DB_LeaderLib_Abilities("DualWielding");
DB_LeaderLib_Abilities("Wand");
DB_LeaderLib_Abilities("MagicArmorMastery");
DB_LeaderLib_Abilities("VitalityMastery");
DB_LeaderLib_Abilities("Perseverance");
DB_LeaderLib_Abilities("Runecrafting");
DB_LeaderLib_Abilities("Brewmaster");

PROC
LeaderLib_Settings_InitStats()
AND
NOT DB_LeaderLib_Talents(_)
THEN
DB_LeaderLib_Talents("ActionPoints");
DB_LeaderLib_Talents("ActionPoints2");
DB_LeaderLib_Talents("AirSpells");
DB_LeaderLib_Talents("AnimalEmpathy");
DB_LeaderLib_Talents("AttackOfOpportunity");
DB_LeaderLib_Talents("AvoidDetection");
DB_LeaderLib_Talents("Awareness");
DB_LeaderLib_Talents("Backstab");
DB_LeaderLib_Talents("Beastmaster");
DB_LeaderLib_Talents("Bully");
DB_LeaderLib_Talents("Carry");
DB_LeaderLib_Talents("ChanceToHitMelee");
DB_LeaderLib_Talents("ChanceToHitRanged");
DB_LeaderLib_Talents("Charm");
DB_LeaderLib_Talents("Courageous");
DB_LeaderLib_Talents("Criticals");
DB_LeaderLib_Talents("Damage");
DB_LeaderLib_Talents("Demon");
DB_LeaderLib_Talents("DualWieldingDodging");
DB_LeaderLib_Talents("Durability");
DB_LeaderLib_Talents("EarthSpells");
DB_LeaderLib_Talents("ElementalAffinity");
DB_LeaderLib_Talents("ElementalRanger");
DB_LeaderLib_Talents("Escapist");
DB_LeaderLib_Talents("Executioner");
DB_LeaderLib_Talents("ExpGain");
DB_LeaderLib_Talents("ExtraSkillPoints");
DB_LeaderLib_Talents("ExtraStatPoints");
DB_LeaderLib_Talents("ExtraWandCharge");
DB_LeaderLib_Talents("FaroutDude");
DB_LeaderLib_Talents("FireSpells");
DB_LeaderLib_Talents("FiveStarRestaurant");
DB_LeaderLib_Talents("Flanking");
DB_LeaderLib_Talents("FolkDancer");
DB_LeaderLib_Talents("GoldenMage");
DB_LeaderLib_Talents("IceKing");
DB_LeaderLib_Talents("IncreasedArmor");
DB_LeaderLib_Talents("Initiative");
DB_LeaderLib_Talents("Intimidate");
DB_LeaderLib_Talents("InventoryAccess");
DB_LeaderLib_Talents("ItemCreation");
DB_LeaderLib_Talents("ItemMovement");
DB_LeaderLib_Talents("Kickstarter");
DB_LeaderLib_Talents("Kinetics");
DB_LeaderLib_Talents("Leech");
DB_LeaderLib_Talents("LightStep");
DB_LeaderLib_Talents("LightningRod");
DB_LeaderLib_Talents("Lockpick");
DB_LeaderLib_Talents("LoneWolf");
DB_LeaderLib_Talents("Luck");
DB_LeaderLib_Talents("Memory");
DB_LeaderLib_Talents("MrKnowItAll");
DB_LeaderLib_Talents("NoAttackOfOpportunity");
DB_LeaderLib_Talents("Perfectionist");
DB_LeaderLib_Talents("Politician");
DB_LeaderLib_Talents("QuickStep");
DB_LeaderLib_Talents("Raistlin");
DB_LeaderLib_Talents("RangerLoreArrowRecover");
DB_LeaderLib_Talents("RangerLoreEvasionBonus");
DB_LeaderLib_Talents("RangerLoreRangedAPBonus");
DB_LeaderLib_Talents("Reason");
DB_LeaderLib_Talents("Repair");
DB_LeaderLib_Talents("ResistDead");
DB_LeaderLib_Talents("ResistFear");
DB_LeaderLib_Talents("ResistKnockdown");
DB_LeaderLib_Talents("ResistPoison");
DB_LeaderLib_Talents("ResistSilence");
DB_LeaderLib_Talents("ResistStun");
DB_LeaderLib_Talents("ResurrectToFullHealth");
DB_LeaderLib_Talents("RogueLoreDaggerAPBonus");
DB_LeaderLib_Talents("RogueLoreDaggerBackStab");
DB_LeaderLib_Talents("RogueLoreGrenadePrecision");
DB_LeaderLib_Talents("RogueLoreHoldResistance");
DB_LeaderLib_Talents("RogueLoreMovementBonus");
DB_LeaderLib_Talents("Scientist");
DB_LeaderLib_Talents("Sight");
DB_LeaderLib_Talents("SpillNoBlood");
DB_LeaderLib_Talents("StandYourGround");
DB_LeaderLib_Talents("Stench");
DB_LeaderLib_Talents("SurpriseAttack");
DB_LeaderLib_Talents("Trade");
DB_LeaderLib_Talents("ViolentMagic");
DB_LeaderLib_Talents("Vitality");
DB_LeaderLib_Talents("WalkItOff");
DB_LeaderLib_Talents("WarriorLoreGrenadeRange");
DB_LeaderLib_Talents("WarriorLoreNaturalArmor");
DB_LeaderLib_Talents("WarriorLoreNaturalHealth");
DB_LeaderLib_Talents("WarriorLoreNaturalResistance");
DB_LeaderLib_Talents("WaterSpells");
DB_LeaderLib_Talents("WeatherProof");
DB_LeaderLib_Talents("WhatARush");

PROC
LeaderLib_Settings_InitStats()
AND
NOT DB_LeaderLib_RaceTalents(_)
THEN
//Racial Talents
DB_LeaderLib_RaceTalents("Dwarf_Sneaki");
DB_LeaderLib_RaceTalents("Dwarf_Strength");
DB_LeaderLib_RaceTalents("Elf_CorpseEating");
DB_LeaderLib_RaceTalents("Elf_Finesse");
DB_LeaderLib_RaceTalents("Human_Civil");
DB_LeaderLib_RaceTalents("Human_Wits");
DB_LeaderLib_RaceTalents("Lizard_Intelligence");
DB_LeaderLib_RaceTalents("Lizard_Persuasion");
DB_LeaderLib_RaceTalents("Zombie");

PROC
LeaderLib_Settings_InitStats()
AND
NOT DB_LeaderLib_QuestTalents(_)
THEN
DB_LeaderLib_QuestTalents("Quest_GhostTree");
DB_LeaderLib_QuestTalents("Quest_SpidersKiss_Int");
DB_LeaderLib_QuestTalents("Quest_SpidersKiss_Null");
DB_LeaderLib_QuestTalents("Quest_SpidersKiss_Per");
DB_LeaderLib_QuestTalents("Quest_SpidersKiss_Str");
DB_LeaderLib_QuestTalents("Quest_TradeSecrets");

PROC
LeaderLib_Settings_InitSurfaces()
AND
NOT DB_LeaderLib_Surfaces(_,_)
THEN
LeaderLib_Settings_RegisterSurface("SurfaceNone", "None");
LeaderLib_Settings_RegisterSurface("SurfaceFire", "Ground", "Standard");
LeaderLib_Settings_RegisterSurface("SurfaceFireBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceFireCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceFirePurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceWater", "Ground", "Standard");
LeaderLib_Settings_RegisterSurface("SurfaceWaterElectrified", "Ground", "Standard", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterFrozen", "Ground", "Standard");
LeaderLib_Settings_RegisterSurface("SurfaceWaterBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceWaterElectrifiedBlessed", "Ground", "Blessed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterFrozenBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceWaterElectrifiedCursed", "Ground", "Cursed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterFrozenCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceWaterPurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterElectrifiedPurified", "Ground", "Purified", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterFrozenPurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceBlood", "Ground", "Standard", "BloodStandard");
LeaderLib_Settings_RegisterSurface("SurfaceBloodElectrified", "Ground", "Electrified", "BloodStandard");
LeaderLib_Settings_RegisterSurface("SurfaceBloodFrozen", "Ground", "BloodStandard");
LeaderLib_Settings_RegisterSurface("SurfaceBloodBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceBloodElectrifiedBlessed", "Ground", "Blessed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodFrozenBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceBloodElectrifiedCursed", "Ground", "Cursed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodFrozenCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceBloodPurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodElectrifiedPurified", "Ground", "Purified", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodFrozenPurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfacePoison", "Ground", "Standard");
LeaderLib_Settings_RegisterSurface("SurfacePoisonBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfacePoisonCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfacePoisonPurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceOil", "Ground", "Standard");
LeaderLib_Settings_RegisterSurface("SurfaceOilBlessed", "Ground", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceOilCursed", "Ground", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceOilPurified", "Ground", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceLava", "Ground", "Special");
LeaderLib_Settings_RegisterSurface("SurfaceSource", "Ground", "Special");
LeaderLib_Settings_RegisterSurface("SurfaceWeb", "Ground", "Web");
LeaderLib_Settings_RegisterSurface("SurfaceWebBlessed", "Ground", "Web", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceWebCursed", "Ground", "Web", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceWebPurified", "Ground", "Web", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceDeepwater", "Ground", "Special");
LeaderLib_Settings_RegisterSurface("SurfaceFireCloud", "Standard", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfaceFireCloudBlessed", "Cloud", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceFireCloudCursed", "Cloud", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceFireCloudPurified", "Cloud", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloud", "Standard", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudElectrified", "Standard", "Cloud", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudBlessed", "Cloud", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudElectrifiedBlessed", "Cloud", "Blessed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudCursed", "Cloud", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudElectrifiedCursed", "Cloud", "Cursed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudPurified", "Cloud", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceWaterCloudElectrifiedPurified", "Cloud", "Purified", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloud", "Standard", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudElectrified", "BloodStandard", "Cloud", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudBlessed", "Cloud", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudElectrifiedBlessed", "Cloud", "Blessed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudCursed", "Cloud", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudElectrifiedCursed", "Cloud", "Cursed", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudPurified", "Cloud", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceBloodCloudElectrifiedPurified", "Cloud", "Purified", "Electrified");
LeaderLib_Settings_RegisterSurface("SurfacePoisonCloud", "Standard", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfacePoisonCloudBlessed", "Cloud", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfacePoisonCloudCursed", "Cloud", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfacePoisonCloudPurified", "Cloud", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceSmokeCloud", "Standard", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfaceSmokeCloudBlessed", "Cloud", "Blessed");
LeaderLib_Settings_RegisterSurface("SurfaceSmokeCloudCursed", "Cloud", "Cursed");
LeaderLib_Settings_RegisterSurface("SurfaceSmokeCloudPurified", "Cloud", "Purified");
LeaderLib_Settings_RegisterSurface("SurfaceExplosionCloud", "Special", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfaceFrostCloud", "Standard", "Cloud");
LeaderLib_Settings_RegisterSurface("SurfaceDeathfogCloud", "Deathfog", "Cloud");

PROC
LeaderLib_Settings_RegisterSurface((STRING)_Surface)
THEN
LeaderLib_Settings_RegisterSurface(_Surface, "");

PROC
LeaderLib_Settings_RegisterSurface((STRING)_Surface, (STRING)_Group)
THEN
LeaderLib_Settings_RegisterSurface(_Surface, _Group, "", "");

PROC
LeaderLib_Settings_RegisterSurface((STRING)_Surface, (STRING)_Group1, (STRING)_Group2)
THEN
LeaderLib_Settings_RegisterSurface(_Surface, _Group1, _Group2, "");

PROC
LeaderLib_Settings_RegisterSurface((STRING)_Surface, (STRING)_Group1, (STRING)_Group2, (STRING)_Group3)
AND
_Surface != ""
AND
SysCount("DB_LeaderLib_Surfaces", 2, _Index)
THEN
DB_LeaderLib_Surfaces(_Index, _Surface);
LeaderLib_Settings_AddSurfaceToGroup(_Surface, _Group1);
LeaderLib_Settings_AddSurfaceToGroup(_Surface, _Group2);
LeaderLib_Settings_AddSurfaceToGroup(_Surface, _Group3);

PROC
LeaderLib_Settings_AddSurfaceToGroup((STRING)_Surface, (STRING)_Group)
AND
_Group != ""
THEN
DB_LeaderLib_SurfaceGroup(_Surface, _Group);
//LeaderLog_Log("DEBUG", "[LeaderLib:Settings:AddSurfaceToGroup] Added surface [",_Surface,"] to group [",_Group,"]");

PROC
LeaderLib_Settings_InitRaceData()
AND
NOT DB_LeaderLib_RaceTags(_,_)
THEN
//_Race, _Tag
DB_LeaderLib_RaceTags("Dwarf", "DWARF");
DB_LeaderLib_RaceTags("Human", "HUMAN");
DB_LeaderLib_RaceTags("Elf", "ELF");
DB_LeaderLib_RaceTags("Lizard", "LIZARD");
DB_LeaderLib_RaceTags("Undead_Dwarf", "DWARF");
DB_LeaderLib_RaceTags("Undead_Human", "HUMAN");
DB_LeaderLib_RaceTags("Undead_Elf", "ELF");
DB_LeaderLib_RaceTags("Undead_Lizard", "LIZARD");

PROC
LeaderLib_Settings_InitRaceData()
AND
NOT DB_LeaderLib_RaceTemplates(_,_,_,_)
THEN
//DB_LeaderLib_RaceTemplates(_RaceTag, _Undead, _Female, _Template)
DB_LeaderLib_RaceTemplates("DWARF", 0, 1,"Dwarves_Hero_Female_c1c58707-b06e-499e-9c43-91a90be602b0");
DB_LeaderLib_RaceTemplates("DWARF", 0, 0,"Dwarves_Hero_Male_024d1763-b2aa-46ec-b705-6338059838be");
DB_LeaderLib_RaceTemplates("DWARF", 1, 1,"Dwarves_Hero_Female_Undead_373a1966-a54d-4a3e-be70-e779a654c914");
DB_LeaderLib_RaceTemplates("DWARF", 1, 0,"Dwarves_Hero_Male_Undead_726442a5-6856-4b0d-91ed-5d2f003b8a0c");
DB_LeaderLib_RaceTemplates("ELF", 0, 1,"Elves_Hero_Female_7ef846f5-34dc-450c-815e-a58dfc190a7b");
DB_LeaderLib_RaceTemplates("ELF", 0, 0,"Elves_Hero_Male_19913083-924e-45ec-8b5b-119d5913722f");
DB_LeaderLib_RaceTemplates("ELF", 1, 1,"Elves_Hero_Female_Undead_7f366172-9fd1-45df-8719-a6d14cb534b3");
DB_LeaderLib_RaceTemplates("ELF", 1, 0,"Elves_Hero_Male_Undead_9eeaaafd-c47d-4650-9200-b00430d61e83");
DB_LeaderLib_RaceTemplates("HUMAN", 0, 1,"Humans_Hero_Female_de8ea39b-6989-4b93-b34a-81e549c540f2");
DB_LeaderLib_RaceTemplates("HUMAN", 0, 0,"Humans_Hero_Male_25611432-e5e4-482a-8f5d-196c9e90001e");
DB_LeaderLib_RaceTemplates("HUMAN", 1, 1,"Humans_Hero_Female_Undead_3bd0693d-0b0a-4f6d-93e2-aea9be654bee");
DB_LeaderLib_RaceTemplates("HUMAN", 1, 0,"Humans_Hero_Male_Undead_5ab5d036-4606-4265-962e-c2e4d2d2408b");
DB_LeaderLib_RaceTemplates("LIZARD", 0, 1,"Lizards_Hero_Female_e4a6bcfa-ecd6-4e56-8592-cd16b85a1c50");
DB_LeaderLib_RaceTemplates("LIZARD", 0, 0,"Lizards_Hero_Male_fa12e21f-0a10-47dd-af46-ab2c9a53cf6d");
DB_LeaderLib_RaceTemplates("LIZARD", 1, 1,"Lizards_Hero_Female_Undead_725f9a47-a3d4-41d2-92cf-017d18c2b212");
DB_LeaderLib_RaceTemplates("LIZARD", 1, 0,"Lizards_Hero_Male_Undead_57b70554-36bf-4b86-b9aa-8f7cc3944153");

/*
These two databases can be used in combination like so:
AND
CharacterGetRace(_Player, 1, _Race)
AND
DB_LeaderLib_RaceTags(_Race, _RaceTag)
AND
IsTagged(_Player, "UNDEAD", _Undead)
AND
CharacterIsFemale(_Player, _Female)
AND
DB_LeaderLib_RaceTemplates(_RaceTag, _Undead, _Female, _Template)
THEN
CharacterTransform(_Player, _Template, 1, 1, 1, 1, 1, 1, 0);
*/

PROC
LeaderLib_Settings_InitStatusData()
AND
NOT DB_LeaderLib_EngineStatus(_)
THEN
//These are statuses with their own type
DB_LeaderLib_EngineStatus("HIT");
DB_LeaderLib_EngineStatus("CLIMBING");
DB_LeaderLib_EngineStatus("DYING");
DB_LeaderLib_EngineStatus("ENCUMBERED");
DB_LeaderLib_EngineStatus("EXPLODE");
DB_LeaderLib_EngineStatus("HEALING");
DB_LeaderLib_EngineStatus("FLANKED");
DB_LeaderLib_EngineStatus("INSURFACE");
DB_LeaderLib_EngineStatus("LYING");
DB_LeaderLib_EngineStatus("MATERIAL");
DB_LeaderLib_EngineStatus("POST_MAGIC_CONTROL"); // HEAL type
DB_LeaderLib_EngineStatus("POST_PHYS_CONTROL"); // HEAL type
//DB_LeaderLib_EngineStatus("SHACKLES_OF_PAIN");
DB_LeaderLib_EngineStatus("SHACKLES_OF_PAIN_CASTER");
DB_LeaderLib_EngineStatus("ROTATE");
DB_LeaderLib_EngineStatus("SITTING");
DB_LeaderLib_EngineStatus("SMELLY");
DB_LeaderLib_EngineStatus("SNEAKING");
DB_LeaderLib_EngineStatus("SPIRIT");
DB_LeaderLib_EngineStatus("SPIRIT_VISION");
DB_LeaderLib_EngineStatus("SOURCE_MUTED");
DB_LeaderLib_EngineStatus("SUMMONING");
DB_LeaderLib_EngineStatus("TELEPORT_FALLING");
DB_LeaderLib_EngineStatus("THROWN");
DB_LeaderLib_EngineStatus("TUTORIAL_BED");
DB_LeaderLib_EngineStatus("UNSHEATHED");

//Auras to ignore, or aura statuses that can be resisted, and result in event spam
PROC
LeaderLib_Settings_InitStatusData()
AND
NOT DB_LeaderLib_AuraStatus("LeaderLib", _)
THEN
DB_LeaderLib_AuraStatus("LeaderLib", "HEAL_SHARING");
DB_LeaderLib_AuraStatus("LeaderLib", "HEAL_SHARING_CASTER");
DB_LeaderLib_AuraStatus("LeaderLib", "LEADERSHIP");
DB_LeaderLib_AuraStatus("LeaderLib", "PROTECTION_CIRCLE");
DB_LeaderLib_AuraStatus("LeaderLib", "FAVOURABLE_WIND");

//AuraEnemies
DB_LeaderLib_AuraStatus("LeaderLib", "QUEST_PAIN");
/*
DB_LeaderLib_AuraStatus("LeaderLib", "POISONED");
DB_LeaderLib_AuraStatus("LeaderLib", "BLIND");
DB_LeaderLib_AuraStatus("LeaderLib", "FEAR");
DB_LeaderLib_AuraStatus("LeaderLib", "MUTED");
DB_LeaderLib_AuraStatus("LeaderLib", "SUFFOCATING");
DB_LeaderLib_AuraStatus("LeaderLib", "PETRIFIED");
*/

PROC
LeaderLib_Settings_InitStatusData()
AND
NOT DB_LeaderLib_DisableStatuses("LeaderLib", _)
THEN
//Statuses with LoseControl set to Yes
DB_LeaderLib_DisableStatuses("LeaderLib", "CHICKEN");
DB_LeaderLib_DisableStatuses("LeaderLib", "COW");
DB_LeaderLib_DisableStatuses("LeaderLib", "MADNESS");
DB_LeaderLib_DisableStatuses("LeaderLib", "STORY_FROZEN");
DB_LeaderLib_DisableStatuses("LeaderLib", "TAUNTED");
DB_LeaderLib_DisableStatuses("LeaderLib", "ZOMBIE_CHICKEN");

PROC
LeaderLib_Settings_InitStatusData()
AND
NOT DB_LeaderLib_DisablingStatusTypes(_)
THEN
DB_LeaderLib_DisablingStatusTypes("DEACTIVATED");
DB_LeaderLib_DisablingStatusTypes("CHARMED");
DB_LeaderLib_DisablingStatusTypes("FEAR");
DB_LeaderLib_DisablingStatusTypes("INCAPACITATED");
DB_LeaderLib_DisablingStatusTypes("KNOCKED_DOWN");
DB_LeaderLib_DisablingStatusTypes("PLAY_DEAD");
//END_REGION

//REGION UPDATES
PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1, 1, 9, 2)
THEN
SysClear("DB_LeaderLib_EngineStatus", 1);
LeaderLib_Settings_InitStatusData();
DB_NeutralTagIgnore("LeaderLib_Dummy");
LeaderLog_Log("SYSTEM", "[LeaderLib:Settings] Updated settings from version [",_PastVersion,"].");

PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1, 1, 0, 0)
THEN
NOT DB_LeaderLib_SurfaceGroup("SurfaceBloodFrozen", "Standard");
NOT DB_LeaderLib_SurfaceGroup("SurfaceBloodElectrified", "Standard");
NOT DB_LeaderLib_SurfaceGroup("SurfaceBloodCloudElectrified", "Standard");
DB_LeaderLib_SurfaceGroup("SurfaceBlood", "BloodStandard");
DB_LeaderLib_SurfaceGroup("SurfaceBloodFrozen", "BloodStandard");
DB_LeaderLib_SurfaceGroup("SurfaceBloodElectrified", "BloodStandard");
DB_LeaderLib_SurfaceGroup("SurfaceBloodCloudElectrified", "BloodStandard");
LeaderLog_Log("SYSTEM", "[LeaderLib:Settings] Updating surface settings from version [1.1.0.0].");

PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1, 1, 0, 0)
THEN
LeaderLog_Log("SYSTEM", "[LeaderLib:Settings] Updated settings from version [",_PastVersion,"].");
LeaderLib_Settings_InitSurfaces();
LeaderLib_Settings_SettingsInitialized();

PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
NOT DB_LLBARTER_DialogBlacklist("LeaderLib", _PastVersion)
THEN
DB_LLBARTER_DialogBlacklist("LeaderLib", "LeaderLib_AutosaveMenu");
LeaderLog_Log("SYSTEM", "[LeaderLib:Settings] Updating dialog variables from version [",_PastVersion,"].");
DB_LeaderLib_Settings_DialogVariables("CurrentAutosaveInterval", "LeaderLib_AutosaveMenu_CurrentSettings_b48918b6-4864-4aae-88fd-53d658ccb082");
SysClear("DB_LeaderLib_Talents", 1);
LeaderLib_Settings_InitStats();

PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1, 1, 6, 0)
THEN
LeaderLog_Log("SYSTEM", "[LeaderLib:Settings] Updated settings from version [",_PastVersion,"].");
LeaderLib_Settings_InitRaceData();

PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
NOT DB_LeaderLib_EngineStatus(_)
THEN
LeaderLog_Log("SYSTEM", "[LeaderLib:Settings] Updating [DB_LeaderLib_EngineStatus] from version [",_PastVersion,"].");
LeaderLib_Settings_InitStatusData();
//END_REGION

//REGION MOD_DATA
IF
ObjectFlagSet("LeaderLib_Settings_ListMods", _Player, _Instance)
THEN
ObjectClearFlag(_Player, "LeaderLib_Settings_ListMods");
LeaderLib_Settings_BuildModList();

PROC
LeaderLib_Settings_BuildModList()
AND
DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, _Str)
THEN
NOT DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, _Str);

PROC
LeaderLib_Settings_BuildModList()
AND
NOT DB_LeaderLib_Settings_Temp_RegisteredModsList(_)
THEN
DB_LeaderLib_Settings_Temp_RegisteredModsList("");

QRY
LeaderLib_Settings_QRY_SetActiveText((STRING)_ModID, (STRING)_Author)
AND
LeaderUpdater_QRY_ModRegisteredActiveGoal(_ModID, _Author)
AND
LeaderUpdater_QRY_ModIsActive(_ModID, _Author)
THEN
DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, " <b>(Active)</b>");

QRY
LeaderLib_Settings_QRY_SetActiveText((STRING)_ModID, (STRING)_Author)
AND
LeaderUpdater_QRY_ModRegisteredActiveGoal(_ModID, _Author)
AND
NOT LeaderUpdater_QRY_ModIsActive(_ModID, _Author)
THEN
DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, " <b>(Deactivated)</b>");

QRY
LeaderLib_Settings_QRY_SetActiveText((STRING)_ModID, (STRING)_Author)
AND
NOT LeaderUpdater_QRY_ModRegisteredActiveGoal(_ModID, _Author)
THEN
DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, " <b>(No Active Goal Registered)</b>");

PROC
LeaderLib_Settings_BuildModList()
AND
DB_Mods_Registered(_ModID, _Author, _Version)
AND
DB_LeaderLib_Settings_Temp_RegisteredModsList(_Str)
AND
StringConcatenate("<b>", _ModID, _NameStr)
AND
LeaderLib_Settings_QRY_SetActiveText(_ModID, _Author)
AND
DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, _ActiveStr)
AND
LeaderLog_QRY_Log("COMBINE", _Str, _NameStr, "</b> (", _Version, ") by ",_Author, _ActiveStr, "<br>")
AND
DB_LeaderLog_Temp_CombinedString(_CombinedStr)
THEN
NOT DB_LeaderLib_Settings_Temp_RegisteredModsList(_Str);
DB_LeaderLib_Settings_Temp_RegisteredModsList(_CombinedStr);
NOT DB_LeaderLog_Temp_CombinedString(_CombinedStr);
NOT DB_LeaderLib_Settings_Temp_ActiveModText(_ModID, _Author, _ActiveStr);

PROC
LeaderLib_Settings_BuildModList()
AND
DB_LeaderLib_Settings_DialogVariables("ModList", _DialogVar)
AND
DB_LeaderLib_Settings_Temp_RegisteredModsList(_Str)
THEN
DialogSetVariableString("LeaderLib_SettingsMenu", _DialogVar, _Str);
NOT DB_LeaderLib_Settings_Temp_RegisteredModsList(_Str);
//END_REGION

//REGION SETTINGS_MENU
IF
DialogStarted("LeaderLib_SettingsMenu", _Instance)
THEN
LeaderLib_Settings_BuildModList();
//END_REGION

//REGION MODMENU_BOOK
IF
ObjectFlagSet("LeaderLib_Commands_GiveModMenuBook", _Object, _Instance)
AND
LeaderLib_Helper_QRY_ClearObjectFlag(_Object, "LeaderLib_Commands_GiveModMenuBook")
AND
DB_LeaderLib_Settings_ItemTemplates("Book_ModMenu", _ModMenuBookTemplate)
THEN
ItemTemplateAddTo(_ModMenuBookTemplate, _Object, 1, 1);
//END_REGION

//REGION COMMANDS
IF
ObjectFlagSet("LeaderLib_Commands_CheckTraders", (CHARACTERGUID)_Player, _)
THEN
ObjectClearFlag(_Player, "LeaderLib_Commands_CheckTraders");
LeaderLib_Traders_Internal_StartCheckingTraders();

IF
ObjectFlagSet("LeaderLib_Commands_AddModMenuSkill", (CHARACTERGUID)_Player, _)
THEN
ObjectClearFlag(_Player, "LeaderLib_Commands_AddModMenuSkill");
CharacterAddSkill(_Player, "Shout_LeaderLib_OpenModMenu", 1);

IF
ObjectFlagSet("LeaderLib_Commands_RemoveModMenuSkill", (CHARACTERGUID)_Player, _)
THEN
ObjectClearFlag(_Player, "LeaderLib_Commands_RemoveModMenuSkill");
CharacterRemoveSkill(_Player, "Shout_LeaderLib_OpenModMenu");
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LeaderLib_11__Start"
