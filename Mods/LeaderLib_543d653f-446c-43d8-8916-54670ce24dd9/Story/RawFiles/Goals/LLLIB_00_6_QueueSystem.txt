Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
//DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
//DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _Entry)
//DB_LLLIB_Queue_Temp_TimerRunning(_QueueID)
//DB_LLLIB_Queue_Temp_PopSuccess(_QueueID)
KBSECTION
//REGION CREATE_START
PROC
LeaderLib_Queue_Create((STRING)_QueueID, (STRING)_ArrayID, (STRING)_TimerName, (INTEGER)_TickRate, (STRING)_IterateEvent, (STRING)_IterateCompletionEvent, (STRING)_OnCompletionEvent)
THEN
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent);

PROC
LeaderLib_Queue_SetTimeout((STRING)_QueueID, (STRING)_TimerName, (INTEGER)_TimeoutValue)
THEN
LeaderLib_Queue_SetTimeout(_QueueID, _TimerName, _TimeoutValue, "");

PROC
LeaderLib_Queue_SetTimeout((STRING)_QueueID, (STRING)_TimerName, (INTEGER)_TimeoutValue, (STRING)_OnTimeoutEvent)
THEN
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent);

PROC
LeaderLib_Queue_Start((STRING)_QueueID)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:QueueSystem:Start] Starting queue [",_QueueID,"].");
LLLIB_Queue_Internal_NextTick(_QueueID);

PROC
LeaderLib_Queue_Start((STRING)_QueueID)
AND
NOT DB_LLLIB_Queue(_QueueID, _, _, _, _, _, _)
THEN
LeaderLog_Log("ERROR", "[LeaderLib:QueueSystem:Start] [ERROR] No queue with ID [",_QueueID,"] exists!.");
LLLIB_Queue_Internal_NextTick(_QueueID);

PROC
LeaderLib_Queue_Stop((STRING)_QueueID)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
THEN
TimerCancel(_TimerName);
LLLIB_Queue_Internal_CancelTimeoutTimer(_QueueID);
//END_REGION

//REGION QUERIES
QRY
LeaderLib_Queue_QRY_IsRunning((STRING)_QueueID)
AND
DB_LLLIB_Queue_Temp_TimerRunning(_QueueID)
THEN
DB_NOOP(1);
//END_REGION

//REGION TICK_LOOP
PROC
LLLIB_Queue_Internal_StartTimer((STRING)_QueueID)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
AND
NOT DB_LLLIB_Queue_Temp_TimerRunning(_QueueID)
THEN
TimerLaunch(_TimerName, _TickRate);
DB_LLLIB_Queue_Temp_TimerRunning(_QueueID);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
THEN
NOT DB_LLLIB_Queue_Temp_TimerRunning(_QueueID);
NOT DB_LLLIB_Queue_Temp_PopSuccess(_QueueID);
LLLIB_Queue_Internal_NextTick(_QueueID);

PROC
LLLIB_Queue_Internal_NextTick((STRING)_QueueID)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
AND
DB_LLLIB_Array_Length(_ArrayID, _Length)
AND
_Length > 0
AND
LeaderLib_Array_QRY_Pop(_ArrayID)
AND
DB_LLLIB_Array_Temp_PopValue(_ArrayID, _Entry)
THEN
LeaderLog_Log("TRACE", "[LeaderLog:Queue:NextTick] Sending event [",_IterateEvent,"] for popped array item [",_Entry,"].");
NOT DB_LLLIB_Array_Temp_PopValue(_ArrayID, _Entry);
DB_LLLIB_Queue_Temp_PopSuccess(_QueueID);
LLLIB_Queue_Internal_ClearCurrentEntry(_QueueID);
DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _Entry);
LLLIB_Queue_Internal_StartTimeoutTimer(_QueueID);
LeaderLib_SendEvent(_IterateEvent);

PROC
LLLIB_Queue_Internal_NextTick((STRING)_QueueID)
AND
NOT DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _)
THEN
LLLIB_Queue_Internal_CheckForErrors(_QueueID);

PROC
LLLIB_Queue_Internal_NextTick((STRING)_QueueID)
AND
NOT DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
AND
LeaderLib_Array_QRY_EmptyLength(_ArrayID)
THEN
LeaderLog_Log("TRACE", "[LeaderLog:Queue:NextTick] Array [",_ArrayID,"] is empty. Completing queue [",_QueueID,"].");
LLLIB_Queue_Internal_OnComplete(_QueueID);

IF
StoryEvent(_, _IterateCompletionEvent)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
THEN
LeaderLog_Log("TRACE", "[LeaderLog:Queue:IterateCompletionEvent] Received iteration completion event [",_IterateCompletionEvent,"] for queue [",_QueueID,"]. Starting next tick after timer.");
LLLIB_Queue_Internal_ClearCurrentEntry(_QueueID);
LLLIB_Queue_Internal_CancelTimeoutTimer(_QueueID);
LLLIB_Queue_Internal_StartTimer(_QueueID);
//END_REGION

//REGION ERROR_CHECKING
PROC
LLLIB_Queue_Internal_CheckForErrors((STRING)_QueueID)
AND
NOT DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
AND
DB_LLLIB_Array_Length(_ArrayID, _Length)
AND
_Length > 0
AND
NOT DB_LLLIB_Queue_Temp_PopSuccess(_QueueID)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:QueueSystem:NextTick] [ERROR] Queue [",_QueueID,"] had an error popping a value from array [",_ArrayID,"].");

PROC
LLLIB_Queue_Internal_CheckForErrors((STRING)_QueueID)
AND
NOT DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
AND
NOT DB_LLLIB_Array_Length(_ArrayID, _)
AND
NOT DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:QueueSystem:NextTick] [ERROR] Queue [",_QueueID,"] array [",_ArrayID,"] is missing a length entry!.");
//END_REGION

//REGION ON_COMPLETE
PROC
LLLIB_Queue_Internal_OnComplete((STRING)_QueueID)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:QueueSystem:OnComplete] Queue [",_QueueID,"] complete. Sending event [",_OnCompletionEvent,"].");
LeaderLib_Queue_Stop(_QueueID); // Stop timers, if they're still running for some reason
LeaderLib_Queue_ClearQueue(_QueueID);
LeaderLib_SendEvent(_OnCompletionEvent);
//END_REGION

//REGION CLEAR
PROC
LeaderLib_Queue_ClearQueue((STRING)_QueueID)
AND
DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent)
THEN
TimerCancel(_TimerName);
LLLIB_Queue_Internal_ClearCurrentEntry(_QueueID);
LeaderLib_Array_ClearArray(_ArrayID);
NOT DB_LLLIB_Queue(_QueueID, _ArrayID, _TimerName, _TickRate, _IterateEvent, _IterateCompletionEvent, _OnCompletionEvent);

PROC
LeaderLib_Queue_ClearQueue((STRING)_QueueID)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
THEN
TimerCancel(_TimerName);
NOT DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent);

PROC
LLLIB_Queue_Internal_ClearCurrentEntry((STRING)_QueueID)
AND
DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _Entry)
THEN
NOT DB_LLLIB_Queue_Temp_CurrentEntry(_QueueID, _Entry);
//END_REGION

//REGION TIMEOUT
PROC
LLLIB_Queue_Internal_StartTimeoutTimer((STRING)_QueueID)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
THEN
TimerCancel(_TimerName);
TimerLaunch(_TimerName, _TimeoutValue);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
AND
_OnTimeoutEvent != ""
THEN
LeaderLib_SendEvent(_OnTimeoutEvent);

IF
StoryEvent(_, _OnTimeoutEvent)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
THEN
LLLIB_Queue_Internal_OnTimeout(_QueueID);

PROC
LLLIB_Queue_Internal_OnTimeout((STRING)_QueueID)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
AND
IntegertoString(_TimeoutValue, _TimeoutValStr)
THEN
TimerCancel(_TimerName);
LeaderLog_Log("DEBUG", "[LeaderLib:QueueSystem:Timeout] Queue [",_QueueID,"] timed out after ",_TimeoutValStr,"ms. Starting next tick.");
LLLIB_Queue_Internal_StartTimer(_QueueID);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
AND
_OnTimeoutEvent == ""
THEN
LLLIB_Queue_Internal_OnTimeout(_QueueID);

PROC
LLLIB_Queue_Internal_CancelTimeoutTimer((STRING)_QueueID)
AND
DB_LLLIB_Queue_Timeout(_QueueID, _TimerName, _TimeoutValue, _OnTimeoutEvent)
THEN
TimerCancel(_TimerName);
//END_REGION

//REGION UPDATER
PROC
LLLIB_System_RegisterDatabases()
THEN
LeaderUpdater_Register_Database("LeaderLib", "LaughingLeader", "QueueSystem", "DB_LLLIB_Queue", 7);
LeaderUpdater_Register_Database("LeaderLib", "LaughingLeader", "QueueSystem", "DB_LLLIB_Queue_Timeout", 4);
LeaderUpdater_Register_Database("LeaderLib", "LaughingLeader", "QueueSystem", "DB_LLLIB_Queue_Temp_CurrentEntry", 2);
LeaderUpdater_Register_Database("LeaderLib", "LaughingLeader", "QueueSystem", "DB_LLLIB_Queue_Temp_TimerRunning", 1);
LeaderUpdater_Register_Database("LeaderLib", "LaughingLeader", "QueueSystem", "DB_LLLIB_Queue_Temp_PopSuccess", 1);
LeaderLog_Log("TRACE", "[LeaderLib:QueueSystem] Databases registered.");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
